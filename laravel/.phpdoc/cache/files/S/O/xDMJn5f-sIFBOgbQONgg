1711241701
waR3U4bTeM%3Aaac679edd712d8fa1f679395e820673d-6627c16b5b9943e96ee325a84b5c26ae
s:17412:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjY2MjdjMTZiNWI5OTQzZTk2ZWUzMjVhODRiNWMyNmFlIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6NDQ6IjQ4ZjMxMWM5OGQ2MTdiN2YyNWViOGFlYjU1NmI3YzgzNDY5ZmQ1ODIucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6Njg6InN0b3JhZ2UvZnJhbWV3b3JrL3ZpZXdzLzQ4ZjMxMWM5OGQ2MTdiN2YyNWViOGFlYjU1NmI3YzgzNDY5ZmQ1ODIucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czoxMjA3ODoiDQogDQo8P3BocCAkX19lbnYtPnN0YXJ0U2VjdGlvbignY29udGVudCcpOyA/Pg0KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL1NvcnRhYmxlLzEuMTUuMC9Tb3J0YWJsZS5taW4uanMiPjwvc2NyaXB0Pg0KPGgxIHN0eWxlPSJjb2xvcjp3aGl0ZTsgbGVmdDo0MyU7IHBvc2l0aW9uOmFic29sdXRlOyBtYXJnaW4tdG9wOjIwcHg7IiBpZD0ibGVlciIgb25jbGljaz0ibGVlclRleHQoKSI+U29icmUgTm9zb3Ryb3M8L2gxPg0KDQogICAgPGRpdiBjbGFzcz0iZGl2LWFib3V0Ij4NCg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KICAgICAgICAgICAgDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJ0YSIgaWQ9ImJvdG9uLWxlZXIiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbmVkb3ItaW1hZ2VuZXMiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWphMS1tYXJjIiBpZD0iZm90b0F1ZGlvMSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhamEyLW1hcmMiIGlkPSJhYnJpck1vZGFsMSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxhdWRpbyBpZD0ianVsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2Ugc3JjPSIuL2ltZy9qdWw1Lm1wMyIgdHlwZT0iYXVkaW8vbXAzIj48L3NvdXJjZT4NCiAgICAgICAgICAgICAgICAgICAgPC9hdWRpbz4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW5pZG8gY29udGVuaWRvLWJvdG9uIj4NCiAgICAgICAgICAgICAgICAgICAgPGgxPk1hcmMgR2ltw6luZXo8L2gxPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ0cmFiYWpvLW1hcmMiID48cCBzdHlsZT0iZGlzcGxheTpub25lOyI+Qm90w7NuIE1hcmM8L3A+PC9idXR0b24+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICA8L2Rpdj4NCg0KICAgICAgICAgICAgPGRpYWxvZyBpZD0ibW9kYWwxIiBjbGFzcz0ibWlNb2RhbCI+DQogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXItbW9kYWwiPlbDrWRlbyBQcmVzZW50YWNpw7MgTWFyYzwvaDI+DQogICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgIDxicj4gDQogICAgICAgICAgICAgICAgPGRpdiBpZD0iY2Fyb3VzZWxFeGFtcGxlQ29udHJvbHMiIGNsYXNzPSJjYXJvdXNlbCBzbGlkZSIgZGF0YS1icy1yaWRlPSJmYWxzZSIgPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pbm5lciIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2Fyb3VzZWwtaXRlbSBhY3RpdmUiPiAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZpZGVvIGlkPSJtaXF1ZWwiIHdpZHRoPSIxMDAlIiBoZWlnaHQ9IjcwJSIgYXV0b3BsYXk9InRydWUiIG11dGVkPSJ0cnVlIiBsb29wPSJ0cnVlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9Ii4vaW1nL2dvbG1lc3NpOTMubXA0IiB0eXBlPSJ2aWRlby9tcDQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdmlkZW8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleC1ib3RvbmVzLW1vZGVsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbmNsaWNrPSJwbGF5VmlkMU1hcmMoKSIgdHlwZT0iYnV0dG9uIj5QbGF5IFZpZGVvPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25jbGljaz0icGF1c2VWaWQxTWFyYygpIiB0eXBlPSJidXR0b24iPlBhdXNlIFZpZGVvPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWl0ZW0gIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmlkZW8gaWQ9Im1lc3NpMiIgd2lkdGg9IjEwMCUiIGhlaWdodD0iNTQwcHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz0iLi9pbWcvbWlxdWVlbC5tcDQiIHR5cGU9InZpZGVvL21wNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92aWRlbz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4LWJvdG9uZXMtbW9kZWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uY2xpY2s9InBsYXlWaWQyTWFyYygpIiB0eXBlPSJidXR0b24iPlBsYXkgVmlkZW88L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbmNsaWNrPSJwYXVzZVZpZDJNYXJjKCkiIHR5cGU9ImJ1dHRvbiI+UGF1c2UgVmlkZW88L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iY2Fyb3VzZWwtY29udHJvbC1wcmV2IiB0eXBlPSJidXR0b24iIGRhdGEtYnMtdGFyZ2V0PSIjY2Fyb3VzZWxFeGFtcGxlQ29udHJvbHMiIGRhdGEtYnMtc2xpZGU9InByZXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcm91c2VsLWNvbnRyb2wtcHJldi1pY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJldmlvdXM8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJjYXJvdXNlbC1jb250cm9sLW5leHQiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10YXJnZXQ9IiNjYXJvdXNlbEV4YW1wbGVDb250cm9scyIgZGF0YS1icy1zbGlkZT0ibmV4dCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2Fyb3VzZWwtY29udHJvbC1uZXh0LWljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idmlzdWFsbHktaGlkZGVuIj5OZXh0PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZsZXgtYm90b25lcy1tb2RlbCI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9ImNlcnJhck1vZGFsMSI+Q2VycmFyPC9idXR0b24+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2RpYWxvZz4NCg0KDQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJ0YSI+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVuZWRvci1pbWFnZW5lcyI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhamExLWlzbWFlbCIgaWQ9ImZvdG9BdWRpbzIiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYWphMi1pc21hZWwiIGlkPSJhYnJpck1vZGFsMiI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDxhdWRpbyBpZD0ic2hha2lyYSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz0iLi9pbWcvc2hha2lyYS5tcDMiIHR5cGU9ImF1ZGlvL21wMyI+PC9zb3VyY2U+DQogICAgICAgICAgICAgICAgICAgIDwvYXVkaW8+DQoNCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW5pZG8iPg0KICAgICAgICAgICAgICAgICAgICA8aDM+SXNtYWVsIEhlcm1vc288L2gzPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ0cmFiYWpvLWlzbWFlbCI+PHAgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPkJvdMOzbiBJc21hZWw8L3A+PC9idXR0b24+DQogICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgDQoNCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpYWxvZyBpZD0ibW9kYWwyIiBjbGFzcz0ibWlNb2RhbCI+DQogICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJoZWFkZXItbW9kYWwiPlbDrWRlbyBQcmVzZW50YWNpw7MgSXNtYWVsPC9oMj4NCiAgICAgICAgICAgICAgICA8YnI+DQogICAgICAgICAgICAgICAgPGJyPiANCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjYXJvdXNlbEV4YW1wbGVDb250cm9sczIiIGNsYXNzPSJjYXJvdXNlbCBzbGlkZSIgZGF0YS1icy1yaWRlPSJmYWxzZSIgPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pbm5lciIgPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2Fyb3VzZWwtaXRlbSBhY3RpdmUiPiAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZpZGVvIGlkPSJjc2dvMSIgd2lkdGg9IjEwMCUiIGhlaWdodD0iNzAlIiBhdXRvcGxheT0idHJ1ZSIgbXV0ZWQ9InRydWUiIGxvb3A9InRydWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz0iLi9pbWcvY3NnbzIubXA0IiB0eXBlPSJ2aWRlby9tcDQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdmlkZW8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleC1ib3RvbmVzLW1vZGVsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbmNsaWNrPSJwbGF5VmlkMUlzbWFlbCgpIiB0eXBlPSJidXR0b24iPlBsYXkgVmlkZW88L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbmNsaWNrPSJwYXVzZVZpZDFJc21hZWwoKSIgdHlwZT0iYnV0dG9uIj5QYXVzZSBWaWRlbzwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJvdXNlbC1pdGVtICI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZpZGVvIGlkPSJjc2dvMiIgd2lkdGg9IjEwMCUiIGhlaWdodD0iNTQwcHgiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz0iLi9pbWcvY3NnbzEubXA0IiB0eXBlPSJ2aWRlby9tcDQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdmlkZW8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmxleC1ib3RvbmVzLW1vZGVsIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbmNsaWNrPSJwbGF5VmlkMklzbWFlbCgpIiB0eXBlPSJidXR0b24iPlBsYXkgVmlkZW88L2J1dHRvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbmNsaWNrPSJwYXVzZVZpZDJJc21hZWwoKSIgdHlwZT0iYnV0dG9uIj5QYXVzZSBWaWRlbzwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJjYXJvdXNlbC1jb250cm9sLXByZXYiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10YXJnZXQ9IiNjYXJvdXNlbEV4YW1wbGVDb250cm9sczIiIGRhdGEtYnMtc2xpZGU9InByZXYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcm91c2VsLWNvbnRyb2wtcHJldi1pY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+UHJldmlvdXM8L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJjYXJvdXNlbC1jb250cm9sLW5leHQiIHR5cGU9ImJ1dHRvbiIgZGF0YS1icy10YXJnZXQ9IiNjYXJvdXNlbEV4YW1wbGVDb250cm9sczIiIGRhdGEtYnMtc2xpZGU9Im5leHQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImNhcm91c2VsLWNvbnRyb2wtbmV4dC1pY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9zcGFuPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InZpc3VhbGx5LWhpZGRlbiI+TmV4dDwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGJyPg0KICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmbGV4LWJvdG9uZXMtbW9kZWwiPg0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJjZXJyYXJNb2RhbDIiPkNlcnJhcjwvYnV0dG9uPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaWFsb2c+DQoNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgDQogICAgICAgIDwvZGl2Pg0KDQoNCiAgICAgICANCg0KICAgIDwvZGl2Pg0KDQogICAgPG5hdiBjbGFzcz0iZGl2LWJudC1tZW51Ij4NCiAgICAgICAgPGEgaHJlZj0iPD9waHAgZWNobyBlKHJvdXRlKCdkYXNoYm9hcmQnKSk7ID8+IiByb2xlPSJidXR0b24iIHRpdGxlPSJFbnJlcmUiID48aSBjbGFzcz0iZmEtc29saWQgZmEtYXJyb3ctcm90YXRlLWxlZnQiPjwvaT48L2E+DQogICAgPC9uYXY+DQogICAgDQogICAgPHNjcmlwdD4NCg0KICAgICAgICBsZXQganVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2p1bCcpOw0KICAgICAgICBsZXQgc2hha2lyYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaGFraXJhJyk7DQoNCiAgICAgICAgdmFyIGltYWdlbjE9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvdG9BdWRpbzEnKTsNCg0KICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGluaWNpYXIxLCBmYWxzZSk7DQogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgcGFyYXIxLCBmYWxzZSk7DQoNCiAgICAgICAgZnVuY3Rpb24gaW5pY2lhcjEoKXsNCiAgICAgICAgICAgIGltYWdlbjEuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgaW5pY2lhcjFGLCBmYWxzZSk7DQogICAgICAgIH0NCiAgICAgICAgZnVuY3Rpb24gcGFyYXIxKCl7DQogICAgICAgICAgICBpbWFnZW4xLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgcGFyYXIxRiwgZmFsc2UpOw0KICAgICAgICB9DQogICAgICAgIGZ1bmN0aW9uIHBhcmFyMUYoKXsNCiAgICAgICAgICAgIGp1bC5wYXVzZSgpOw0KICAgICAgICB9DQogICAgICAgIGZ1bmN0aW9uIGluaWNpYXIxRigpew0KICAgICAgICAgICAganVsLnZvbHVtZSA9IDAuNjsNCiAgICAgICAgICAgIGp1bC5wbGF5KCk7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgaW1hZ2VuMj1kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm90b0F1ZGlvMicpOw0KDQogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgaW5pY2lhcjIsIGZhbHNlKTsNCiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBwYXJhcjIsIGZhbHNlKTsNCg0KICAgICAgICBmdW5jdGlvbiBpbmljaWFyMigpew0KICAgICAgICAgICAgaW1hZ2VuMi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBpbmljaWFyMkYsIGZhbHNlKTsNCiAgICAgICAgfQ0KICAgICAgICBmdW5jdGlvbiBwYXJhcjIoKXsNCiAgICAgICAgICAgIGltYWdlbjIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdXQnLCBwYXJhcjJGLCBmYWxzZSk7DQogICAgICAgIH0NCiAgICAgICAgZnVuY3Rpb24gcGFyYXIyRigpew0KICAgICAgICAgICAgc2hha2lyYS5wYXVzZSgpOw0KICAgICAgICB9DQogICAgICAgIGZ1bmN0aW9uIGluaWNpYXIyRigpew0KICAgICAgICAgICAgc2hha2lyYS52b2x1bWUgPSAwLjY7DQogICAgICAgICAgICBzaGFraXJhLnBsYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGNvbnN0IGJ0bkFicmlyMSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNhYnJpck1vZGFsMSIpOw0KICAgICAgICBjb25zdCBidG5DZXJyYXIxID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2NlcnJhck1vZGFsMSIpOw0KICAgICAgICBjb25zdCBtb2RhbDEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjbW9kYWwxIik7DQoNCiAgICAgICAgYnRuQWJyaXIxLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwoKT0+ew0KICAgICAgICAgICAgbW9kYWwxLnNob3dNb2RhbCgpOw0KICAgICAgICB9KQ0KDQogICAgICAgIGJ0bkNlcnJhcjEuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCgpPT57DQogICAgICAgICAgICBtb2RhbDEuY2xvc2UoKTsNCiAgICAgICAgfSkNCg0KDQogICAgICAgIHZhciB2aWQxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1pcXVlbCIpOyANCg0KICAgICAgICBmdW5jdGlvbiBwbGF5VmlkMU1hcmMoKSB7IA0KICAgICAgICAgICAgdmlkMS5wbGF5KCk7IA0KICAgICAgICB9IA0KDQogICAgICAgIGZ1bmN0aW9uIHBhdXNlVmlkMU1hcmMoKSB7IA0KICAgICAgICAgICAgdmlkMS5wYXVzZSgpOyANCiAgICAgICAgfQ0KDQoNCiAgICAgICAgdmFyIHZpZDIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWVzc2kyIik7IA0KDQogICAgICAgIGZ1bmN0aW9uIHBsYXlWaWQyTWFyYygpIHsgDQogICAgICAgICAgICB2aWQyLnBsYXkoKTsgDQogICAgICAgIH0gDQoNCiAgICAgICAgZnVuY3Rpb24gcGF1c2VWaWQyTWFyYygpIHsgDQogICAgICAgICAgICB2aWQyLnBhdXNlKCk7IA0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIHZpZDMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY3NnbzEiKTsgDQoNCiAgICAgICAgZnVuY3Rpb24gcGxheVZpZDFJc21hZWwoKSB7IA0KICAgICAgICAgICAgdmlkMy5wbGF5KCk7IA0KICAgICAgICB9IA0KDQogICAgICAgIGZ1bmN0aW9uIHBhdXNlVmlkMUlzbWFlbCgpIHsgDQogICAgICAgICAgICB2aWQzLnBhdXNlKCk7IA0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIHZpZDQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY3NnbzIiKTsgDQoNCiAgICAgICAgZnVuY3Rpb24gcGxheVZpZDJJc21hZWwoKSB7IA0KICAgICAgICAgICAgdmlkNC5wbGF5KCk7IA0KICAgICAgICB9IA0KDQogICAgICAgIGZ1bmN0aW9uIHBhdXNlVmlkMklzbWFlbCgpIHsgDQogICAgICAgICAgICB2aWQ0LnBhdXNlKCk7IA0KICAgICAgICB9DQoNCiAgICAgICAgY29uc3QgYnRuQWJyaXIyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2FicmlyTW9kYWwyIik7DQogICAgICAgIGNvbnN0IGJ0bkNlcnJhcjIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjY2VycmFyTW9kYWwyIik7DQogICAgICAgIGNvbnN0IG1vZGFsMiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNtb2RhbDIiKTsNCg0KICAgICAgICBidG5BYnJpcjIuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCgpPT57DQogICAgICAgICAgICBtb2RhbDIuc2hvd01vZGFsKCk7DQogICAgICAgIH0pDQoNCiAgICAgICAgYnRuQ2VycmFyMi5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsKCk9PnsNCiAgICAgICAgICAgIG1vZGFsMi5jbG9zZSgpOw0KICAgICAgICB9KQ0KDQogICAgICAgIGNvbnN0IGRyYWdBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLmNvbnRhaW5lciIpOw0KDQogICAgICAgIFNvcnRhYmxlLmNyZWF0ZShkcmFnQXJlYSwgew0KDQogICAgICAgICAgICBhbmltYXRpb246IDM1MCwNCiAgICAgICAgICAgIGRyYWdDbGFzczogImRyYWciDQoNCg0KICAgICAgICB9KTsgICAgICAgDQoNCiAgICAgICAgLy8gQXF1ZXN0YSBmdW5jacOzIGZhIHF1ZSBxdWFuIGxpIGRvbmd1aXMgdW4gY2xpY2sgYWxndW4gZWxlbWVudCBhbWIgZWwgaWQgImxlZXIiIGVzIGd1YXJkaSBlbCBjb250aW5ndXQsIGkgZWwgbGxlZ2VpeGkgZW4gY2FzdGVsbMOgLg0KICAgICAgICBmdW5jdGlvbiBsZWVyVGV4dCgpIHsNCiAgICAgICAgICAgIHZhciB0ZXh0byA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJsZWVyIikuaW5uZXJUZXh0OyAvLyBFbGVtZW50IGFtYiBJRCA9ICJsZWVyIg0KDQogICAgICAgICAgICB2YXIgc3ludGggPSB3aW5kb3cuc3BlZWNoU3ludGhlc2lzOw0KDQogICAgICAgICAgICB2YXIgbXNnID0gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSgpOw0KDQogICAgICAgICAgICBtc2cudGV4dCA9IHRleHRvOyANCiAgICAgICAgICAgIG1zZy5sYW5nID0gJ2VzLUVTJzsgLy8gRGVmaW5pbSBjYXN0ZWxsw6AgDQoNCiAgICAgICAgICAgIHN5bnRoLnNwZWFrKG1zZyk7DQogICAgICAgIH0gDQoNCg0KICAgICAgICAvLyBEZWZpbmltIGRvcyBlbGVtZW50cywgZWxzIGVsZW1lbnQgcGFyZSBpIGwnZWxlbWVudCBmaWxsLiANCiAgICAgICAgY29uc3QgYm90b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYm90b24tbGVlcicpOw0KICAgICAgICBjb25zdCBjb250ZW5pZG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVuaWRvLWJvdG9uJyk7DQoNCiAgICAgICAgLy8gUXVhbiBsaSBkb25ndWlzIGRvYmxlIGNsaWNrIGFsIGVsZW1lbnQgcGFyZSwgbCdlbGVtZW50IGZpbGwgc2Vyw6AgbGxlZ2l0LiANCg0KICAgICAgICBib3Rvbi5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIGxlZXJDb250ZW5pZG8pOw0KICAgICAgICBmdW5jdGlvbiBsZWVyQ29udGVuaWRvKCkgew0KICAgICAgICAgICAgY29uc3QgbWVuc2FqZSA9IG5ldyBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UoKTsNCiAgICAgICAgICAgIG1lbnNhamUubGFuZyA9ICdlcy1FUyc7IC8vIERlZmluaW0gY2FzdGVsbMOgIA0KICAgICAgICAgICAgbWVuc2FqZS50ZXh0ID0gY29udGVuaWRvLnRleHRDb250ZW50Ow0KICAgICAgICAgICAgd2luZG93LnNwZWVjaFN5bnRoZXNpcy5zcGVhayhtZW5zYWplKTsNCiAgICAgICAgfSAgICAgICANCg0KICAgICAgICAvLyBEZWZpbmltIGxhIGZ1bmNpw7MgZGUgbGxlZ2lyIGxhIHBhZ2luYSBpIGVucyBndWFyZGVtIGVuIHVuYSBjb25zdGFudCBpbnRlcm5hIHRvdCBlbCBjb250aW5ndXQgZGUgbGEgcGFnaW5hLiANCiAgICAgICAgZnVuY3Rpb24gc3BlYWtQYWdlKCkgew0KICAgICAgICAgICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LmJvZHkuaW5uZXJUZXh0Ow0KICAgICAgICAgICAgY29uc3Qgc3ludGggPSB3aW5kb3cuc3BlZWNoU3ludGhlc2lzOw0KDQogICAgICAgICAgICBjb25zdCB1dHRlcmFuY2UgPSBuZXcgU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlKHRleHQpOw0KICAgICAgICAgICAgdXR0ZXJhbmNlLmxhbmc9ICdlcy1FUyc7IC8vIERlZmluaW0gY2FzdGVsbMOgIA0KICAgICAgICAgICAgc3ludGguc3BlYWsodXR0ZXJhbmNlKTsNCg0KICAgICAgICB9DQogICAgICAgIC8vIFF1YW4gYXF1ZXN0YSBkcmHDp2VyYSBzaWd1aSBleGVjdXRhZGEsIGV4ZWN1dGFyYSBsYSBmdW5jaW8gYW50ZXJpb3IuIA0KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJrZXlkb3duIiwgKGUpID0+IHsNCiAgICAgICAgaWYgKGUuY3RybEtleSAmJiBlLmFsdEtleSAmJiBlLmtleSA9PT0gInMiKSB7DQogICAgICAgICAgICBzcGVha1BhZ2UoKTsNCiAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICANCiAgICA8L3NjcmlwdD4NCg0KDQo8P3BocCAkX19lbnYtPnN0b3BTZWN0aW9uKCk7ID8+Cjw/cGhwIGVjaG8gJF9fZW52LT5tYWtlKCdsYXlvdXRzLmFwcCcsIFxJbGx1bWluYXRlXFN1cHBvcnRcQXJyOjpleGNlcHQoZ2V0X2RlZmluZWRfdmFycygpLCBbJ19fZGF0YScsICdfX3BhdGgnXSkpLT5yZW5kZXIoKTsgPz48P3BocCAvKipQQVRIIEM6XFVzZXJzXGlzbWFlXERvY3VtZW50c1xQcm95ZWN0b0dlb01pclxnZW9taXItbGFyYXZlbC1JSE1HXGxhcmF2ZWxccmVzb3VyY2VzXHZpZXdzL2Fib3V0LmJsYWRlLnBocCBFTkRQQVRIKiovID8+IjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";