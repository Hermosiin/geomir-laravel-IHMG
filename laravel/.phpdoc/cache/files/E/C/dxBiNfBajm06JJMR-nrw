1711241706
waR3U4bTeM%3A018d7b08d03f84575a3beac481436287-eff68442f486ce10885c869aea209458
s:6044:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImVmZjY4NDQyZjQ4NmNlMTA4ODVjODY5YWVhMjA5NDU4IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTQ6ImVudW0uYmxhZGUucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6Njc6InZlbmRvci9iYWNrcGFjay9jcnVkL3NyYy9yZXNvdXJjZXMvdmlld3MvY3J1ZC9maWVsZHMvZW51bS5ibGFkZS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjM1ODI6Int7LS0gZW51bSAtLX19CkBwaHAKICAgICRlbnRpdHlfbW9kZWwgPSAkZmllbGRbJ21vZGVsJ10gPz8gJGNydWQtPm1vZGVsOwogICAgJGZpZWxkWyd2YWx1ZSddID0gb2xkX2VtcHR5X29yX251bGwoJGZpZWxkWyduYW1lJ10sICcnKSA/PyAgJGZpZWxkWyd2YWx1ZSddID8/ICRmaWVsZFsnZGVmYXVsdCddID8/ICcnOwoKICAgICRwb3NzaWJsZV92YWx1ZXMgPSAoZnVuY3Rpb24oKSB1c2UgKCRlbnRpdHlfbW9kZWwsICRmaWVsZCkgewogICAgICAgIC8vIGlmIGRldmVsb3BlciBwcm92aWRlZCB0aGUgb3B0aW9ucywgdXNlIHRoZW0sIG5vIG5lZCB0byBndWVzcy4KICAgICAgICBpZihpc3NldCgkZmllbGRbJ29wdGlvbnMnXSkpIHsKICAgICAgICAgICAgcmV0dXJuICRmaWVsZFsnb3B0aW9ucyddOwogICAgICAgIH0KCiAgICAgICAgLy8gaWYgd2UgYXJlIGluIGEgUEhQIHZlcnNpb24gd2hlcmUgUEhQIGVudW1zIGFyZSBub3QgYXZhaWxhYmxlLCBpdCBjYW4gb25seSBiZSBhIGRhdGFiYXNlIGVudW0KICAgICAgICBpZighIGZ1bmN0aW9uX2V4aXN0cygnZW51bV9leGlzdHMnKSkgewogICAgICAgICAgICAkb3B0aW9ucyA9ICRlbnRpdHlfbW9kZWw6OmdldFBvc3NpYmxlRW51bVZhbHVlcygkZmllbGRbJ25hbWUnXSk7CiAgICAgICAgICAgIHJldHVybiBhcnJheV9jb21iaW5lKCRvcHRpb25zLCAkb3B0aW9ucyk7CiAgICAgICAgfQoKICAgICAgICAvLyBkZXZlbG9wZXIgY2FuIHByb3ZpZGUgdGhlIGVudW0gY2xhc3Mgc28gdGhhdCB3ZSBleHRyYWN0IHRoZSBhdmFpbGFibGUgb3B0aW9ucyBmcm9tIGl0CiAgICAgICAgaWYoaXNzZXQoJGZpZWxkWydlbnVtX2NsYXNzJ10pKSB7CiAgICAgICAgICAgIGlmKCRmaWVsZFsnZW51bV9jbGFzcyddIGluc3RhbmNlb2YgXEJhY2tlZEVudW0pIHsKICAgICAgICAgICAgICAgICRvcHRpb25zID0gYXJyYXlfY29sdW1uKCRmaWVsZFsnZW51bV9jbGFzcyddOjpjYXNlcygpLCAndmFsdWUnLCAnbmFtZScpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRvcHRpb25zID0gYXJyYXlfY29sdW1uKCRmaWVsZFsnZW51bV9jbGFzcyddOjpjYXNlcygpLCAnbmFtZScpOwogICAgICAgICAgICAkb3B0aW9ucyA9IGFycmF5X2NvbWJpbmUoJG9wdGlvbnMsICRvcHRpb25zKTsKICAgICAgICB9CgogICAgICAgIC8vIGNoZWNrIGZvciBtb2RlbCBjYXN0aW5nLCBpbiB0aGlzIGNhc2UgaXQgbXVzdCBiZSBhIEJha2VkRW51bSB0byB3b3JrIHdpdGggTGFyYXZlbCBjYXN0aW5nCiAgICAgICAgJHBvc3NpYmxlRW51bUNhc3QgPSAobmV3ICRlbnRpdHlfbW9kZWwpLT5nZXRDYXN0cygpWyRmaWVsZFsnbmFtZSddXSA/PyBmYWxzZTsKICAgICAgICBpZighaXNzZXQoJG9wdGlvbnMpICYmICRwb3NzaWJsZUVudW1DYXN0ICYmIGNsYXNzX2V4aXN0cygkcG9zc2libGVFbnVtQ2FzdCkpIHsKICAgICAgICAgICAgJGZpZWxkWydlbnVtX2NsYXNzJ10gPSAkcG9zc2libGVFbnVtQ2FzdDsKICAgICAgICAgICAgJG9wdGlvbnMgPSBhcnJheV9jb2x1bW4oJHBvc3NpYmxlRW51bUNhc3Q6OmNhc2VzKCksICduYW1lJywgJ3ZhbHVlJyk7CiAgICAgICAgfQoKICAgICAgICBpZihmdW5jdGlvbl9leGlzdHMoJ2VudW1fZXhpc3RzJykgJiYgaXNzZXQoJGZpZWxkWydlbnVtX2Z1bmN0aW9uJ10pICYmICRmaWVsZFsnZW51bV9jbGFzcyddKSB7CiAgICAgICAgICAgCiAgICAgICAgICAgICRvcHRpb25zID0gYXJyYXlfbWFwKGZ1bmN0aW9uKCRpdGVtKSB1c2UgKCRmaWVsZCkgewogICAgICAgICAgICAgICAgICAgICRlbnVtQ2xhc3NSZWZsZWN0aW9uID0gbmV3IFxSZWZsZWN0aW9uRW51bSgkZmllbGRbJ2VudW1fY2xhc3MnXSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRlbnVtQ2xhc3NSZWZsZWN0aW9uLT5oYXNDb25zdGFudCgkaXRlbSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGVudW1DbGFzcyA9ICRlbnVtQ2xhc3NSZWZsZWN0aW9uLT5nZXRDb25zdGFudCgkaXRlbSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkZW51bUNsYXNzLT57JGZpZWxkWydlbnVtX2Z1bmN0aW9uJ119KCk7CiAgICAgICAgICAgICAgICB9LCAkb3B0aW9ucyk7CiAgICAgICAgfQogICAgICAgIC8vIGlmIHdlIGhhdmUgdGhlIGVudW0gb3B0aW9ucyByZXR1cm4gdGhlbQogICAgICAgIGlmKGlzc2V0KCRvcHRpb25zKSkgewogICAgICAgICAgICByZXR1cm4gJG9wdGlvbnM7CiAgICAgICAgfQoKICAgICAgICAvLyBubyBlbnVtIG9wdGlvbnMsIGNhbiBvbmx5IGJlIGRhdGFiYXNlIGVudW0KICAgICAgICAkb3B0aW9ucyA9ICRlbnRpdHlfbW9kZWw6OmdldFBvc3NpYmxlRW51bVZhbHVlcygkZmllbGRbJ25hbWUnXSk7CiAgICAgICAgcmV0dXJuIGFycmF5X2NvbWJpbmUoJG9wdGlvbnMsICRvcHRpb25zKTsKICAgIH0pKCk7CiAgICAKCiAgICBpZihmdW5jdGlvbl9leGlzdHMoJ2VudW1fZXhpc3RzJykgJiYgIWVtcHR5KCRmaWVsZFsndmFsdWUnXSkgJiYgJGZpZWxkWyd2YWx1ZSddIGluc3RhbmNlb2YgXFVuaXRFbnVtKSAgewogICAgICAgICRmaWVsZFsndmFsdWUnXSA9ICRmaWVsZFsndmFsdWUnXSBpbnN0YW5jZW9mIFxCYWNrZWRFbnVtID8gJGZpZWxkWyd2YWx1ZSddLT52YWx1ZSA6ICRmaWVsZFsndmFsdWUnXS0+bmFtZTsKICAgIH0KQGVuZHBocAoKQGluY2x1ZGUoJ2NydWQ6OmZpZWxkcy5pbmMud3JhcHBlcl9zdGFydCcpCiAgICA8bGFiZWw+eyEhICRmaWVsZFsnbGFiZWwnXSAhIX08L2xhYmVsPgogICAgQGluY2x1ZGUoJ2NydWQ6OmZpZWxkcy5pbmMudHJhbnNsYXRhYmxlX2ljb24nKQogICAgPHNlbGVjdAogICAgICAgIG5hbWU9Int7ICRmaWVsZFsnbmFtZSddIH19IgogICAgICAgIEBpbmNsdWRlKCdjcnVkOjpmaWVsZHMuaW5jLmF0dHJpYnV0ZXMnKQogICAgICAgID4KCiAgICAgICAgQGlmICgkZW50aXR5X21vZGVsOjppc0NvbHVtbk51bGxhYmxlKCRmaWVsZFsnbmFtZSddKSkKICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj4tPC9vcHRpb24+CiAgICAgICAgQGVuZGlmCgogICAgICAgICAgICBAaWYgKGNvdW50KCRwb3NzaWJsZV92YWx1ZXMpKQogICAgICAgICAgICAgICAgQGZvcmVhY2ggKCRwb3NzaWJsZV92YWx1ZXMgYXMgJGtleSA9PiAkcG9zc2libGVfdmFsdWUpCiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ie3sgJGtleSB9fSIKICAgICAgICAgICAgICAgICAgICAgICAgQGlmICgkZmllbGRbJ3ZhbHVlJ109PSRrZXkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICA+e3sgJHBvc3NpYmxlX3ZhbHVlIH19PC9vcHRpb24+CiAgICAgICAgICAgICAgICBAZW5kZm9yZWFjaAogICAgICAgICAgICBAZW5kaWYKICAgIDwvc2VsZWN0PgoKICAgIHt7LS0gSElOVCAtLX19CiAgICBAaWYgKGlzc2V0KCRmaWVsZFsnaGludCddKSkKICAgICAgICA8cCBjbGFzcz0iaGVscC1ibG9jayI+eyEhICRmaWVsZFsnaGludCddICEhfTwvcD4KICAgIEBlbmRpZgpAaW5jbHVkZSgnY3J1ZDo6ZmllbGRzLmluYy53cmFwcGVyX2VuZCcpCiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9czo0MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBlbnVtcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBtZXRhZGF0YSI7YTowOnt9fQ==";