1711241705
waR3U4bTeM%3A538d42dff82f8b04438100aa1b595fed-a4dab2347e9901adb21f745a6dc05e99
s:11368:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"a4dab2347e9901adb21f745a6dc05e99";s:39:" phpDocumentor\Reflection\Php\File name";s:8:"crud.php";s:39:" phpDocumentor\Reflection\Php\File path";s:51:"vendor/backpack/crud/src/resources/lang/fr/crud.php";s:41:" phpDocumentor\Reflection\Php\File source";s:7599:"<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Backpack Crud Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are used by the CRUD interface.
    | You are free to change them to anything
    | you want to customize your views to better match your application.
    |
    */

    // Forms
    'save_action_save_and_new'         => 'Enregistrer et créer un nouveau',
    'save_action_save_and_edit'        => 'Enregistrer et éditer',
    'save_action_save_and_back'        => 'Enregistrer et retour',
    'save_action_save_and_preview'     => 'Enregistrer et aperçu',
    'save_action_changed_notification' => 'Action par défaut changée',

    // Create form
    'add'                 => 'Ajouter',
    'back_to_all'         => 'Retour à la liste ',
    'cancel'              => 'Annuler',
    'add_a_new'           => 'Ajouter un nouvel élément ',

    // Edit form
    'edit'                 => 'Modifier',
    'save'                 => 'Enregistrer',

    // Translatable models
    'edit_translations' => 'EDITER LES TRADUCTIONS',
    'language'          => 'Langue',

    // CRUD table view
    'all'                       => 'Tous les ',
    'in_the_database'           => 'dans la base de données',
    'list'                      => 'Liste',
    'reset'                     => 'Reset',
    'actions'                   => 'Actions',
    'preview'                   => 'Aperçu',
    'delete'                    => 'Supprimer',
    'admin'                     => 'Administration',
    'details_row'               => 'Ligne de détail. Modifiez la à volonté.',
    'details_row_loading_error' => 'Une erreur est survenue en chargeant les détails. Veuillez réessayer.',
    'clone' => 'Cloner',
    'clone_success' => '<strong>Elément cloné</strong><br>Un nouvel élément a été ajouté, avec les mêmes informations que celui-ci.',
    'clone_failure' => '<strong>Clonage échoué</strong><br>Le nouvel élément n\'a pu être créé. Merci de réessayer.',

    // Confirmation messages and bubbles
    'delete_confirm'                              => 'Souhaitez-vous réellement supprimer cet élément?',
    'delete_confirmation_title'                   => 'Élément supprimé',
    'delete_confirmation_message'                 => 'L’élément a été supprimé avec succès.',
    'delete_confirmation_not_title'               => 'NON supprimé',
    'delete_confirmation_not_message'             => 'Une erreur est survenue. Votre élément n’a peut-être pas été effacé.',
    'delete_confirmation_not_deleted_title'       => 'Non supprimé',
    'delete_confirmation_not_deleted_message'     => 'Aucune modification. Votre élément a été conservé.',

    // Bulk actions
    'bulk_no_entries_selected_title'   => 'Aucun élément sélectionné',
    'bulk_no_entries_selected_message' => 'Veuillez sélectionner un ou plusieurs éléments pour faire une action groupée',

    // Bulk confirmation
    'bulk_delete_are_you_sure'   => 'Souhaitez-vous vraiment supprimer ces :number éléments?',
    'bulk_delete_sucess_title'   => 'Éléments supprimés',
    'bulk_delete_sucess_message' => ' éléments ont été supprimés',
    'bulk_delete_error_title'    => 'Échec de la suppression',
    'bulk_delete_error_message'  => 'Un ou plusieurs éléments n’ont pu être supprimés',

    // Ajax errors
    'ajax_error_title' => 'Erreur',
    'ajax_error_text'  => 'Erreur lors du chargement. Merci de réactualiser la page.',

    // DataTables translation
    'emptyTable'     => 'Aucune donnée à afficher.',
    'info'           => 'Affichage des éléments _START_ à _END_ sur _TOTAL_',
    'infoEmpty'      => '',
    'infoFiltered'   => '(filtré à partir de _MAX_ éléments au total)',
    'infoPostFix'    => '.',
    'thousands'      => ',',
    'lengthMenu'     => '_MENU_ enregistrements par page',
    'loadingRecords' => 'Chargement...',
    'processing'     => 'Traitement...',
    'search'         => 'Recherche',
    'zeroRecords'    => 'Aucun enregistrement correspondant trouvé',
    'paginate'       => [
        'first'    => 'Premier',
        'last'     => 'Dernier',
        'next'     => 'Suivant',
        'previous' => 'Précédent',
    ],
    'aria' => [
        'sortAscending'  => ': activez pour trier la colonne par ordre croissant',
        'sortDescending' => ': activez pour trier la colonne par ordre décroissant',
    ],
    'export' => [
        'export'            => 'Exporter',
        'copy'              => 'Copier',
        'excel'             => 'Excel',
        'csv'               => 'CSV',
        'pdf'               => 'PDF',
        'print'             => 'Imprimer',
        'column_visibility' => 'Affichage des colonnes',
    ],

    // global crud - errors
    'unauthorized_access' => 'Accès non autorisé - vous n’avez pas les droits nécessaires à la consultation de cette page.',
    'please_fix'          => 'Veuillez corriger les erreurs suivantes :',

    // global crud - success / error notification bubbles
    'insert_success' => 'L’élément a été ajouté avec succès.',
    'update_success' => 'L’élément a été modifié avec succès.',

    // CRUD reorder view
    'reorder'                      => 'Réordonner',
    'reorder_text'                 => 'Utilisez le glisser-déposer pour réordonner.',
    'reorder_success_title'        => 'Fait',
    'reorder_success_message'      => 'L’ordre a été enregistré.',
    'reorder_error_title'          => 'Erreur',
    'reorder_error_message'        => 'L’ordre n’a pas pu être enregistré.',

    // CRUD yes/no
    'yes' => 'Oui',
    'no'  => 'Non',

    // CRUD filters navbar view
    'filters'        => 'Filtres',
    'toggle_filters' => 'Activer les filtres',
    'remove_filters' => 'Retirer les filtres',

    //filters language strings
    'today' => 'Aujourd\'hui',
    'yesterday' => 'Hier',
    'last_7_days' => '7 derniers jours',
    'last_30_days' => '30 derniers jours',
    'this_month' => 'Ce mois-ci',
    'last_month' => 'Le mois dernier',
    'custom_range' => 'Durée personnalisé',
    'weekLabel' => 'S',

    // Fields
    'browse_uploads'            => 'Parcourir les fichier chargés',
    'select_all'                => 'Tout sélectionner',
    'select_files'              => 'Choisir des fichiers',
    'select_file'               => 'Choisir un fichier',
    'clear'                     => 'Effacer',
    'page_link'                 => 'Lien de la page',
    'page_link_placeholder'     => 'http://example.com/votre-page',
    'internal_link'             => 'Lien interne',
    'internal_link_placeholder' => 'Identifiant de lien interne. Ex: \'admin/page\' (sans guillemets) pour \':url\'',
    'external_link'             => 'Lien externe',
    'choose_file'               => 'Choisissez un fichier',
    'new_item'                  => 'Nouvel élément',
    'select_entry'              => 'Selectionner un élément',
    'select_entries'            => 'Selectionner des éléments',

    //Table field
    'table_cant_add'    => 'Impossible d’ajouter un nouveau :entity',
    'table_max_reached' => 'Nombre maximum :max atteint',

    // File manager
    'file_manager' => 'Gestionnaire de fichiers',

    // InlineCreateOperation
    'related_entry_created_success' => 'L\'élément associé a été créé et sélectionné.',
    'related_entry_created_error' => 'Impossible de créer un élément associé.',
];
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";