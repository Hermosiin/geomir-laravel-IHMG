1711241706
waR3U4bTeM%3A6efbdb939583db20fd8aa1ca7dbc962b-9f489600242e2826dab81de70f429f8a
s:25096:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjlmNDg5NjAwMjQyZTI4MjZkYWI4MWRlNzBmNDI5ZjhhIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjY6ImRhdGF0YWJsZXNfbG9naWMuYmxhZGUucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NzY6InZlbmRvci9iYWNrcGFjay9jcnVkL3NyYy9yZXNvdXJjZXMvdmlld3MvY3J1ZC9pbmMvZGF0YXRhYmxlc19sb2dpYy5ibGFkZS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjE3ODQ5OiIgQHBocAogICAgLy8gYXMgaXQgaXMgcG9zc2libGUgdGhhdCB3ZSBjYW4gYmUgcmVkaXJlY3RlZCB3aXRoIHBlcnNpc3RlbnQgdGFibGUgd2Ugc2F2ZSB0aGUgYWxlcnRzIGluIGEgdmFyaWFibGUKICAgIC8vIGFuZCBmbHVzaCB0aGVtIGZyb20gc2Vzc2lvbiwgc28gd2Ugd2lsbCBnZXQgdGhlbSBsYXRlciBmcm9tIGxvY2FsU3RvcmFnZS4KICAgICRiYWNrcGFja19hbGVydHMgPSBcQWxlcnQ6OmdldE1lc3NhZ2VzKCk7CiAgICBcQWxlcnQ6OmZsdXNoKCk7CiBAZW5kcGhwCgogIHt7LS0gREFUQSBUQUJMRVMgU0NSSVBUIC0tfX0KICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJ7eyBhc3NldCgncGFja2FnZXMvZGF0YXRhYmxlcy5uZXQvanMvanF1ZXJ5LmRhdGFUYWJsZXMubWluLmpzJykgfX0iPjwvc2NyaXB0PgogIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Int7IGFzc2V0KCdwYWNrYWdlcy9kYXRhdGFibGVzLm5ldC1iczQvanMvZGF0YVRhYmxlcy5ib290c3RyYXA0Lm1pbi5qcycpIH19Ij48L3NjcmlwdD4KICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJ7eyBhc3NldCgncGFja2FnZXMvZGF0YXRhYmxlcy5uZXQtcmVzcG9uc2l2ZS9qcy9kYXRhVGFibGVzLnJlc3BvbnNpdmUubWluLmpzJykgfX0iPjwvc2NyaXB0PgogIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Int7IGFzc2V0KCdwYWNrYWdlcy9kYXRhdGFibGVzLm5ldC1yZXNwb25zaXZlLWJzNC9qcy9yZXNwb25zaXZlLmJvb3RzdHJhcDQubWluLmpzJykgfX0iPjwvc2NyaXB0PgogIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Int7IGFzc2V0KCdwYWNrYWdlcy9kYXRhdGFibGVzLm5ldC1maXhlZGhlYWRlci9qcy9kYXRhVGFibGVzLmZpeGVkSGVhZGVyLm1pbi5qcycpIH19Ij48L3NjcmlwdD4KICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJ7eyBhc3NldCgncGFja2FnZXMvZGF0YXRhYmxlcy5uZXQtZml4ZWRoZWFkZXItYnM0L2pzL2ZpeGVkSGVhZGVyLmJvb3RzdHJhcDQubWluLmpzJykgfX0iPjwvc2NyaXB0PgoKICA8c2NyaXB0PgogICAgLy8gaGVyZSB3ZSB3aWxsIGNoZWNrIGlmIHRoZSBjYWNoZWQgZGF0YVRhYmxlcyBwYWdpbmF0b3IgbGVuZ3RoIGlzIGNvbmZvcm1hYmxlIHdpdGggY3VycmVudCBwYWdpbmF0b3Igc2V0dGluZ3MuCiAgICAvLyBkYXRhdGFibGVzIGNhY2hlcyB0aGUgYWpheCByZXNwb25zZXMgd2l0aCBwYWdlTGVuZ3RoIGluIExvY2FsU3RvcmFnZSBzbyB3aGVuIGNoYW5naW5nIHRoaXMKICAgIC8vIHNldHRpbmdzIGluIGNvbnRyb2xsZXIgdXNlcnMgZ2V0IHVuZXhwZWN0ZWQgcmVzdWx0cy4gVG8gYXZvaWQgdGhhdCB3ZSB3aWxsIHJlc2V0CiAgICAvLyB0aGUgdGFibGUgY2FjaGUgd2hlbiBib3RoIGxlbmd0aHMgZG9uJ3QgbWF0Y2guCiAgICBsZXQgJGR0Q2FjaGVkSW5mbyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0RhdGFUYWJsZXNfY3J1ZFRhYmxlXy97eyRjcnVkLT5nZXRSb3V0ZSgpfX0nKSkKICAgICAgICA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0RhdGFUYWJsZXNfY3J1ZFRhYmxlXy97eyRjcnVkLT5nZXRSb3V0ZSgpfX0nKSkgOiBbXTsKICAgIHZhciAkZHREZWZhdWx0UGFnZUxlbmd0aCA9IHt7ICRjcnVkLT5nZXREZWZhdWx0UGFnZUxlbmd0aCgpIH19OwogICAgbGV0ICRkdFN0b3JlZFBhZ2VMZW5ndGggPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRGF0YVRhYmxlc19jcnVkVGFibGVfL3t7JGNydWQtPmdldFJvdXRlKCl9fV9wYWdlTGVuZ3RoJyk7CgogICAgaWYoISRkdFN0b3JlZFBhZ2VMZW5ndGggJiYgJGR0Q2FjaGVkSW5mby5sZW5ndGggIT09IDAgJiYgJGR0Q2FjaGVkSW5mby5sZW5ndGggIT09ICRkdERlZmF1bHRQYWdlTGVuZ3RoKSB7CiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ0RhdGFUYWJsZXNfY3J1ZFRhYmxlXy97eyRjcnVkLT5nZXRSb3V0ZSgpfX0nKTsKICAgIH0KCiAgICAvLyBpbiB0aGlzIHBhZ2Ugd2UgYWxsd2F5cyBwYXNzIHRoZSBhbGVydHMgdG8gbG9jYWxTdG9yYWdlIGJlY2F1c2Ugd2UgY2FuIGJlIHJlZGlyZWN0ZWQgd2l0aAogICAgLy8gcGVyc2lzdGVudCB0YWJsZSwgYW5kIHRoaXMgd2F5IHdlIGd1YXJhbnRlZSBub24tZHVwbGljYXRlIGFsZXJ0cy4KICAgICRvbGRBbGVydHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdiYWNrcGFja19hbGVydHMnKSkKICAgICAgICA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2JhY2twYWNrX2FsZXJ0cycpKSA6IHt9OwoKICAgICRuZXdBbGVydHMgPSBAanNvbigkYmFja3BhY2tfYWxlcnRzKTsKCiAgICBPYmplY3QuZW50cmllcygkbmV3QWxlcnRzKS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUpIHsKICAgICAgICBpZih0eXBlb2YgJG9sZEFsZXJ0c1t0eXBlWzBdXSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgdHlwZVsxXS5mb3JFYWNoKGZ1bmN0aW9uKG1zZykgewogICAgICAgICAgICAgICAgJG9sZEFsZXJ0c1t0eXBlWzBdXS5wdXNoKG1zZyk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRvbGRBbGVydHNbdHlwZVswXV0gPSB0eXBlWzFdOwogICAgICAgIH0KICAgIH0pOwoKICAgIC8vIGFsd2F5cyBzdG9yZSB0aGUgYWxlcnRzIGluIGxvY2FsU3RvcmFnZSBmb3IgdGhpcyBwYWdlCiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnYmFja3BhY2tfYWxlcnRzJywgSlNPTi5zdHJpbmdpZnkoJG9sZEFsZXJ0cykpOwoKICAgIEBpZiAoJGNydWQtPmdldFBlcnNpc3RlbnRUYWJsZSgpKQoKICAgICAgICB2YXIgc2F2ZWRfbGlzdF91cmwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgne3sgU3RyOjpzbHVnKCRjcnVkLT5nZXRSb3V0ZSgpKSB9fV9saXN0X3VybCcpOwoKICAgICAgICAvL2NoZWNrIGlmIHNhdmVkIHVybCBoYXMgYW55IHBhcmFtZXRlciBvciBpcyBlbXB0eSBhZnRlciBjbGVhcmluZyBmaWx0ZXJzLgogICAgICAgIGlmIChzYXZlZF9saXN0X3VybCAmJiBzYXZlZF9saXN0X3VybC5pbmRleE9mKCc/JykgPCAxKSB7CiAgICAgICAgICAgIHZhciBzYXZlZF9saXN0X3VybCA9IGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBwZXJzaXN0ZW50VXJsID0gc2F2ZWRfbGlzdF91cmwrJyZwZXJzaXN0ZW50LXRhYmxlPXRydWUnOwogICAgICAgIH0KCiAgICB2YXIgYXJyID0gd2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQoJz8nKTsKICAgIC8vIGNoZWNrIGlmIHVybCBoYXMgcGFyYW1ldGVycy4KICAgIGlmIChhcnIubGVuZ3RoID4gMSAmJiBhcnJbMV0gIT09ICcnKSB7CiAgICAgICAgLy8gSVQgSEFTISBDaGVjayBpZiBpdCBpcyBvdXIgb3duIHBlcnNpc3RlbmNlIHJlZGlyZWN0LgogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uc2VhcmNoLmluZGV4T2YoJ3BlcnNpc3RlbnQtdGFibGU9dHJ1ZScpIDwgMSkgewogICAgICAgICAgICAvLyBJRiBOT1Q6IHdlIGRvbid0IHdhbnQgdG8gcmVkaXJlY3QgdGhlIHVzZXIuCiAgICAgICAgICAgIHNhdmVkX2xpc3RfdXJsID0gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIEBpZigkY3J1ZC0+Z2V0UGVyc2lzdGVudFRhYmxlRHVyYXRpb24oKSkKICAgICAgICB2YXIgc2F2ZWRfbGlzdF91cmxfdGltZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd7eyBTdHI6OnNsdWcoJGNydWQtPmdldFJvdXRlKCkpIH19X2xpc3RfdXJsX3RpbWUnKTsKCiAgICAgICAgaWYgKHNhdmVkX2xpc3RfdXJsX3RpbWUpIHsKICAgICAgICAgICAgdmFyICRjdXJyZW50X2RhdGUgPSBuZXcgRGF0ZSgpOwogICAgICAgICAgICB2YXIgJHNhdmVkX3RpbWUgPSBuZXcgRGF0ZShwYXJzZUludChzYXZlZF9saXN0X3VybF90aW1lKSk7CiAgICAgICAgICAgICRzYXZlZF90aW1lLnNldE1pbnV0ZXMoJHNhdmVkX3RpbWUuZ2V0TWludXRlcygpICsge3skY3J1ZC0+Z2V0UGVyc2lzdGVudFRhYmxlRHVyYXRpb24oKX19KTsKCiAgICAgICAgICAgIC8vIGlmIHRoZSBzYXZlIHRpbWUgaXMgbm90IGV4cGlyZWQgd2UgZm9yY2UgdGhlIGZpbHRlciByZWRpcmVjdGlvbi4KICAgICAgICAgICAgaWYoJHNhdmVkX3RpbWUgPiAkY3VycmVudF9kYXRlKSB7CiAgICAgICAgICAgICAgICBpZiAoc2F2ZWRfbGlzdF91cmwgJiYgcGVyc2lzdGVudFVybCE9d2luZG93LmxvY2F0aW9uLmhyZWYpIHsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHBlcnNpc3RlbnRVcmw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBwZXJzaXN0ZW50IHRhYmxlIGV4cGlyZWQsIGxldCdzIG5vdCByZWRpcmVjdCB0aGUgdXNlcgogICAgICAgICAgICAgICAgc2F2ZWRfbGlzdF91cmwgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICBAZW5kaWYKICAgICAgICBpZiAoc2F2ZWRfbGlzdF91cmwgJiYgcGVyc2lzdGVudFVybCE9d2luZG93LmxvY2F0aW9uLmhyZWYpIHsKICAgICAgICAgICAgLy8gZmluYWxseSByZWRpcmVjdCB0aGUgdXNlci4KICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBwZXJzaXN0ZW50VXJsOwogICAgICAgIH0KICAgIEBlbmRpZgoKICAgIHdpbmRvdy5jcnVkID0gewogICAgICBleHBvcnRCdXR0b25zOiBKU09OLnBhcnNlKCd7ISEganNvbl9lbmNvZGUoJGNydWQtPmdldCgnbGlzdC5leHBvcnRfYnV0dG9ucycpKSAhIX0nKSwKICAgICAgZnVuY3Rpb25zVG9SdW5PbkRhdGFUYWJsZXNEcmF3RXZlbnQ6IFtdLAogICAgICBhZGRGdW5jdGlvblRvRGF0YVRhYmxlc0RyYXdFdmVudFF1ZXVlOiBmdW5jdGlvbiAoZnVuY3Rpb25OYW1lKSB7CiAgICAgICAgICBpZiAodGhpcy5mdW5jdGlvbnNUb1J1bk9uRGF0YVRhYmxlc0RyYXdFdmVudC5pbmRleE9mKGZ1bmN0aW9uTmFtZSkgPT0gLTEpIHsKICAgICAgICAgIHRoaXMuZnVuY3Rpb25zVG9SdW5PbkRhdGFUYWJsZXNEcmF3RXZlbnQucHVzaChmdW5jdGlvbk5hbWUpOwogICAgICAgIH0KICAgICAgfSwKICAgICAgcmVzcG9uc2l2ZVRvZ2dsZTogZnVuY3Rpb24oZHQpIHsKICAgICAgICAgICQoZHQudGFibGUoKS5oZWFkZXIoKSkuZmluZCgndGgnKS50b2dnbGVDbGFzcygnYWxsJyk7CiAgICAgICAgICBkdC5yZXNwb25zaXZlLnJlYnVpbGQoKTsKICAgICAgICAgIGR0LnJlc3BvbnNpdmUucmVjYWxjKCk7CiAgICAgIH0sCiAgICAgIGV4ZWN1dGVGdW5jdGlvbkJ5TmFtZTogZnVuY3Rpb24oc3RyLCBhcmdzKSB7CiAgICAgICAgdmFyIGFyciA9IHN0ci5zcGxpdCgnLicpOwogICAgICAgIHZhciBmbiA9IHdpbmRvd1sgYXJyWzBdIF07CgogICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJyLmxlbmd0aDsgaSsrKQogICAgICAgIHsgZm4gPSBmblsgYXJyW2ldIF07IH0KICAgICAgICBmbi5hcHBseSh3aW5kb3csIGFyZ3MpOwogICAgICB9LAogICAgICB1cGRhdGVVcmwgOiBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgbGV0IHVybFN0YXJ0ID0gInt7IHVybCgkY3J1ZC0+cm91dGUpIH19IjsKICAgICAgICBsZXQgdXJsRW5kID0gdXJsLnJlcGxhY2UodXJsU3RhcnQsICcnKTsKICAgICAgICB1cmxFbmQgPSB1cmxFbmQucmVwbGFjZSgnL3NlYXJjaCcsICcnKTsKICAgICAgICBsZXQgbmV3VXJsID0gdXJsU3RhcnQgKyB1cmxFbmQ7CiAgICAgICAgbGV0IHRtcFVybCA9IG5ld1VybC5zcGxpdCgiPyIpWzBdLAogICAgICAgIHBhcmFtc19hcnIgPSBbXSwKICAgICAgICBxdWVyeVN0cmluZyA9IChuZXdVcmwuaW5kZXhPZigiPyIpICE9PSAtMSkgPyBuZXdVcmwuc3BsaXQoIj8iKVsxXSA6IGZhbHNlOwoKICAgICAgICAvLyBleGNsdWRlIHRoZSBwZXJzaXN0ZW50LXRhYmxlIHBhcmFtZXRlciBmcm9tIHVybAogICAgICAgIGlmIChxdWVyeVN0cmluZyAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgcGFyYW1zX2FyciA9IHF1ZXJ5U3RyaW5nLnNwbGl0KCImIik7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSBwYXJhbXNfYXJyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgICAgICAgICBsZXQgcGFyYW0gPSBwYXJhbXNfYXJyW2ldLnNwbGl0KCI9IilbMF07CiAgICAgICAgICAgICAgICBpZiAocGFyYW0gPT09ICdwZXJzaXN0ZW50LXRhYmxlJykgewogICAgICAgICAgICAgICAgICAgIHBhcmFtc19hcnIuc3BsaWNlKGksIDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIG5ld1VybCA9IHBhcmFtc19hcnIubGVuZ3RoID8gdG1wVXJsICsgIj8iICsgcGFyYW1zX2Fyci5qb2luKCImIikgOiB0bXBVcmw7CiAgICAgICAgfQogICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIG5ld1VybCk7CiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3t7IFN0cjo6c2x1ZygkY3J1ZC0+Z2V0Um91dGUoKSkgfX1fbGlzdF91cmwnLCBuZXdVcmwpOwogICAgICB9LAogICAgICBkYXRhVGFibGVDb25maWd1cmF0aW9uOiB7CiAgICAgICAgYkluZm86IHt7IHZhcl9leHBvcnQoJGNydWQtPmdldE9wZXJhdGlvblNldHRpbmcoJ3Nob3dFbnRyeUNvdW50JykgPz8gdHJ1ZSkgfX0sCiAgICAgICAgQGlmICgkY3J1ZC0+Z2V0UmVzcG9uc2l2ZVRhYmxlKCkpCiAgICAgICAgcmVzcG9uc2l2ZTogewogICAgICAgICAgICBkZXRhaWxzOiB7CiAgICAgICAgICAgICAgICBkaXNwbGF5OiAkLmZuLmRhdGFUYWJsZS5SZXNwb25zaXZlLmRpc3BsYXkubW9kYWwoIHsKICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IGZ1bmN0aW9uICggcm93ICkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG93IHRoZSBjb250ZW50IG9mIHRoZSBmaXJzdCBjb2x1bW4KICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXMgdGhlIG1vZGFsIGhlYWRlcgogICAgICAgICAgICAgICAgICAgICAgICAvLyB2YXIgZGF0YSA9IHJvdy5kYXRhKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBkYXRhWzBdOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSApLAogICAgICAgICAgICAgICAgcmVuZGVyZXI6IGZ1bmN0aW9uICggYXBpLCByb3dJZHgsIGNvbHVtbnMgKSB7CgogICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9ICQubWFwKCBjb2x1bW5zLCBmdW5jdGlvbiAoIGNvbCwgaSApIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5IZWFkaW5nID0gY3J1ZC50YWJsZS5jb2x1bW5zKCkuaGVhZGVyKClbY29sLmNvbHVtbkluZGV4XTsKCiAgICAgICAgICAgICAgICAgICAgICAvLyBoaWRlIGNvbHVtbnMgdGhhdCBoYXZlIFZpc2libGVJbk1vZGFsIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICBpZiAoJChjb2x1bW5IZWFkaW5nKS5hdHRyKCdkYXRhLXZpc2libGUtaW4tbW9kYWwnKSA9PSAnZmFsc2UnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzx0ciBkYXRhLWR0LXJvdz0iJytjb2wucm93SW5kZXgrJyIgZGF0YS1kdC1jb2x1bW49IicrY29sLmNvbHVtbkluZGV4KyciPicrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzx0ZCBzdHlsZT0idmVydGljYWwtYWxpZ246dG9wOyBib3JkZXI6bm9uZTsiPjxzdHJvbmc+Jytjb2wudGl0bGUudHJpbSgpKyc6JysnPHN0cm9uZz48L3RkPiAnKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8dGQgc3R5bGU9InBhZGRpbmctbGVmdDoxMHB4O3BhZGRpbmctYm90dG9tOjEwcHg7IGJvcmRlcjpub25lOyI+Jytjb2wuZGF0YSsnPC90ZD4nKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC90cj4nOwogICAgICAgICAgICAgICAgICB9ICkuam9pbignJyk7CgogICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YSA/CiAgICAgICAgICAgICAgICAgICAgICAkKCc8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLXN0cmlwZWQgbWItMCI+JykuYXBwZW5kKCAnPHRib2R5PicgKyBkYXRhICsgJzwvdGJvZHk+JyApIDoKICAgICAgICAgICAgICAgICAgICAgIGZhbHNlOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZml4ZWRIZWFkZXI6IHRydWUsCiAgICAgICAgQGVsc2UKICAgICAgICByZXNwb25zaXZlOiBmYWxzZSwKICAgICAgICBzY3JvbGxYOiB0cnVlLAogICAgICAgIEBlbmRpZgoKICAgICAgICBAaWYgKCRjcnVkLT5nZXRQZXJzaXN0ZW50VGFibGUoKSkKICAgICAgICBzdGF0ZVNhdmU6IHRydWUsCiAgICAgICAgLyoKICAgICAgICAgICAgaWYgZGV2ZWxvcGVyIGZvcmNlZCBmaWVsZCBpbnRvIHRhYmxlICd2aXNpYmxlSW5UYWJsZSA9PiB0cnVlJyB3ZSBtYWtlIHN1cmUgd2hlbiBzYXZpbmcgZGF0YXRhYmxlcyBzdGF0ZQogICAgICAgICAgICB0aGF0IGl0IHJlZmxlY3RzIHRoZSBkZXZlbG9wZXIgZGVjaXNpb24uCiAgICAgICAgKi8KCiAgICAgICAgc3RhdGVTYXZlUGFyYW1zOiBmdW5jdGlvbihzZXR0aW5ncywgZGF0YSkgewoKICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3t7IFN0cjo6c2x1ZygkY3J1ZC0+Z2V0Um91dGUoKSkgfX1fbGlzdF91cmxfdGltZScsIGRhdGEudGltZSk7CgogICAgICAgICAgICBkYXRhLmNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgdmFyIGNvbHVtbkhlYWRpbmcgPSBjcnVkLnRhYmxlLmNvbHVtbnMoKS5oZWFkZXIoKVtpbmRleF07CiAgICAgICAgICAgICAgICBpZiAoJChjb2x1bW5IZWFkaW5nKS5hdHRyKCdkYXRhLXZpc2libGUtaW4tdGFibGUnKSA9PSAndHJ1ZScpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS52aXNpYmxlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBAaWYoJGNydWQtPmdldFBlcnNpc3RlbnRUYWJsZUR1cmF0aW9uKCkpCiAgICAgICAgc3RhdGVMb2FkUGFyYW1zOiBmdW5jdGlvbihzZXR0aW5ncywgZGF0YSkgewogICAgICAgICAgICB2YXIgJHNhdmVkX3RpbWUgPSBuZXcgRGF0ZShkYXRhLnRpbWUpOwogICAgICAgICAgICB2YXIgJGN1cnJlbnRfZGF0ZSA9IG5ldyBEYXRlKCk7CgogICAgICAgICAgICAkc2F2ZWRfdGltZS5zZXRNaW51dGVzKCRzYXZlZF90aW1lLmdldE1pbnV0ZXMoKSArIHt7JGNydWQtPmdldFBlcnNpc3RlbnRUYWJsZUR1cmF0aW9uKCl9fSk7CgogICAgICAgICAgICAvL2lmIHRoZSBzYXZlIHRpbWUgYXMgZXhwaXJlZCB3ZSBmb3JjZSBkYXRhdGFibGVkIHRvIGNsZWFyIGxvY2FsU3RvcmFnZQogICAgICAgICAgICBpZigkc2F2ZWRfdGltZSA8ICRjdXJyZW50X2RhdGUpIHsKICAgICAgICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgne3sgU3RyOjpzbHVnKCRjcnVkLT5nZXRSb3V0ZSgpKX19X2xpc3RfdXJsJykpIHsKICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgne3sgU3RyOjpzbHVnKCRjcnVkLT5nZXRSb3V0ZSgpKSB9fV9saXN0X3VybCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd7eyBTdHI6OnNsdWcoJGNydWQtPmdldFJvdXRlKCkpfX1fbGlzdF91cmxfdGltZScpKSB7CiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3t7IFN0cjo6c2x1ZygkY3J1ZC0+Z2V0Um91dGUoKSkgfX1fbGlzdF91cmxfdGltZScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIEBlbmRpZgogICAgICAgIEBlbmRpZgogICAgICAgIGF1dG9XaWR0aDogZmFsc2UsCiAgICAgICAgcGFnZUxlbmd0aDogJGR0RGVmYXVsdFBhZ2VMZW5ndGgsCiAgICAgICAgbGVuZ3RoTWVudTogQGpzb24oJGNydWQtPmdldFBhZ2VMZW5ndGhNZW51KCkpLAogICAgICAgIC8qIERpc2FibGUgaW5pdGlhbCBzb3J0ICovCiAgICAgICAgYWFTb3J0aW5nOiBbXSwKICAgICAgICBsYW5ndWFnZTogewogICAgICAgICAgICAgICJlbXB0eVRhYmxlIjogICAgICJ7eyB0cmFucygnYmFja3BhY2s6OmNydWQuZW1wdHlUYWJsZScpIH19IiwKICAgICAgICAgICAgICAiaW5mbyI6ICAgICAgICAgICAie3sgdHJhbnMoJ2JhY2twYWNrOjpjcnVkLmluZm8nKSB9fSIsCiAgICAgICAgICAgICAgImluZm9FbXB0eSI6ICAgICAgInt7IHRyYW5zKCdiYWNrcGFjazo6Y3J1ZC5pbmZvRW1wdHknKSB9fSIsCiAgICAgICAgICAgICAgImluZm9GaWx0ZXJlZCI6ICAgInt7IHRyYW5zKCdiYWNrcGFjazo6Y3J1ZC5pbmZvRmlsdGVyZWQnKSB9fSIsCiAgICAgICAgICAgICAgImluZm9Qb3N0Rml4IjogICAgInt7IHRyYW5zKCdiYWNrcGFjazo6Y3J1ZC5pbmZvUG9zdEZpeCcpIH19IiwKICAgICAgICAgICAgICAidGhvdXNhbmRzIjogICAgICAie3sgdHJhbnMoJ2JhY2twYWNrOjpjcnVkLnRob3VzYW5kcycpIH19IiwKICAgICAgICAgICAgICAibGVuZ3RoTWVudSI6ICAgICAie3sgdHJhbnMoJ2JhY2twYWNrOjpjcnVkLmxlbmd0aE1lbnUnKSB9fSIsCiAgICAgICAgICAgICAgImxvYWRpbmdSZWNvcmRzIjogInt7IHRyYW5zKCdiYWNrcGFjazo6Y3J1ZC5sb2FkaW5nUmVjb3JkcycpIH19IiwKICAgICAgICAgICAgICAicHJvY2Vzc2luZyI6ICAgICAiPGltZyBzcmM9J3t7IGFzc2V0KCdwYWNrYWdlcy9iYWNrcGFjay9iYXNlL2ltZy9zcGlubmVyLnN2ZycpIH19JyBhbHQ9J3t7IHRyYW5zKCdiYWNrcGFjazo6Y3J1ZC5wcm9jZXNzaW5nJykgfX0nPiIsCiAgICAgICAgICAgICAgInNlYXJjaCI6ICJfSU5QVVRfIiwKICAgICAgICAgICAgICAic2VhcmNoUGxhY2Vob2xkZXIiOiAie3sgdHJhbnMoJ2JhY2twYWNrOjpjcnVkLnNlYXJjaCcpIH19Li4uIiwKICAgICAgICAgICAgICAiemVyb1JlY29yZHMiOiAgICAie3sgdHJhbnMoJ2JhY2twYWNrOjpjcnVkLnplcm9SZWNvcmRzJykgfX0iLAogICAgICAgICAgICAgICJwYWdpbmF0ZSI6IHsKICAgICAgICAgICAgICAgICAgImZpcnN0IjogICAgICAie3sgdHJhbnMoJ2JhY2twYWNrOjpjcnVkLnBhZ2luYXRlLmZpcnN0JykgfX0iLAogICAgICAgICAgICAgICAgICAibGFzdCI6ICAgICAgICJ7eyB0cmFucygnYmFja3BhY2s6OmNydWQucGFnaW5hdGUubGFzdCcpIH19IiwKICAgICAgICAgICAgICAgICAgIm5leHQiOiAgICAgICAiPiIsCiAgICAgICAgICAgICAgICAgICJwcmV2aW91cyI6ICAgIjwiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiYXJpYSI6IHsKICAgICAgICAgICAgICAgICAgInNvcnRBc2NlbmRpbmciOiAgInt7IHRyYW5zKCdiYWNrcGFjazo6Y3J1ZC5hcmlhLnNvcnRBc2NlbmRpbmcnKSB9fSIsCiAgICAgICAgICAgICAgICAgICJzb3J0RGVzY2VuZGluZyI6ICJ7eyB0cmFucygnYmFja3BhY2s6OmNydWQuYXJpYS5zb3J0RGVzY2VuZGluZycpIH19IgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImJ1dHRvbnMiOiB7CiAgICAgICAgICAgICAgICAgICJjb3B5IjogICAie3sgdHJhbnMoJ2JhY2twYWNrOjpjcnVkLmV4cG9ydC5jb3B5JykgfX0iLAogICAgICAgICAgICAgICAgICAiZXhjZWwiOiAgInt7IHRyYW5zKCdiYWNrcGFjazo6Y3J1ZC5leHBvcnQuZXhjZWwnKSB9fSIsCiAgICAgICAgICAgICAgICAgICJjc3YiOiAgICAie3sgdHJhbnMoJ2JhY2twYWNrOjpjcnVkLmV4cG9ydC5jc3YnKSB9fSIsCiAgICAgICAgICAgICAgICAgICJwZGYiOiAgICAie3sgdHJhbnMoJ2JhY2twYWNrOjpjcnVkLmV4cG9ydC5wZGYnKSB9fSIsCiAgICAgICAgICAgICAgICAgICJwcmludCI6ICAie3sgdHJhbnMoJ2JhY2twYWNrOjpjcnVkLmV4cG9ydC5wcmludCcpIH19IiwKICAgICAgICAgICAgICAgICAgImNvbHZpcyI6ICJ7eyB0cmFucygnYmFja3BhY2s6OmNydWQuZXhwb3J0LmNvbHVtbl92aXNpYmlsaXR5JykgfX0iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBwcm9jZXNzaW5nOiB0cnVlLAogICAgICAgICAgc2VydmVyU2lkZTogdHJ1ZSwKICAgICAgICAgIEBpZigkY3J1ZC0+Z2V0T3BlcmF0aW9uU2V0dGluZygnc2hvd0VudHJ5Q291bnQnKSA9PT0gZmFsc2UpCiAgICAgICAgICAgIHBhZ2luZ1R5cGU6ICJzaW1wbGUiLAogICAgICAgICAgQGVuZGlmCiAgICAgICAgICBzZWFyY2hpbmc6IEBqc29uKCRjcnVkLT5nZXRPcGVyYXRpb25TZXR0aW5nKCdzZWFyY2hhYmxlVGFibGUnKSA/PyB0cnVlKSwKICAgICAgICAgIGFqYXg6IHsKICAgICAgICAgICAgICAidXJsIjogInshISB1cmwoJGNydWQtPnJvdXRlLicvc2VhcmNoJykuJz8nLlJlcXVlc3Q6OmdldFF1ZXJ5U3RyaW5nKCkgISF9IiwKICAgICAgICAgICAgICAidHlwZSI6ICJQT1NUIiwKICAgICAgICAgICAgICAiZGF0YSI6IHsKICAgICAgICAgICAgICAgICJ0b3RhbEVudHJ5Q291bnQiOiAie3skY3J1ZC0+Z2V0T3BlcmF0aW9uU2V0dGluZygndG90YWxFbnRyeUNvdW50JykgPz8gZmFsc2V9fSIKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBkb206CiAgICAgICAgICAgICI8J3JvdyBoaWRkZW4nPCdjb2wtc20tNidpPjwnY29sLXNtLTYgZC1wcmludC1ub25lJ2Y+PiIgKwogICAgICAgICAgICAiPCdyb3cnPCdjb2wtc20tMTIndHI+PiIgKwogICAgICAgICAgICAiPCdyb3cgbXQtMiBkLXByaW50LW5vbmUgJzwnY29sLXNtLTEyIGNvbC1tZC00J2w+PCdjb2wtc20tMCBjb2wtbWQtNCB0ZXh0LWNlbnRlcidCPjwnY29sLXNtLTEyIGNvbC1tZC00ICdwPj4iLAogICAgICB9CiAgfQogIDwvc2NyaXB0PgogIEBpbmNsdWRlKCdjcnVkOjppbmMuZXhwb3J0X2J1dHRvbnMnKQoKICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICBqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCQpIHsKCiAgICAgIHdpbmRvdy5jcnVkLnRhYmxlID0gJCgiI2NydWRUYWJsZSIpLkRhdGFUYWJsZSh3aW5kb3cuY3J1ZC5kYXRhVGFibGVDb25maWd1cmF0aW9uKTsKCiAgICAgIHdpbmRvdy5jcnVkLnVwZGF0ZVVybChsb2NhdGlvbi5ocmVmKTsKCiAgICAgIC8vIG1vdmUgc2VhcmNoIGJhcgogICAgICAkKCIjY3J1ZFRhYmxlX2ZpbHRlciIpLmFwcGVuZFRvKCQoJyNkYXRhdGFibGVfc2VhcmNoX3N0YWNrJyApKTsKICAgICAgJCgiI2NydWRUYWJsZV9maWx0ZXIgaW5wdXQiKS5yZW1vdmVDbGFzcygnZm9ybS1jb250cm9sLXNtJyk7CgogICAgICAvLyBtb3ZlICJzaG93aW5nIHggb3V0IG9mIHkiIGluZm8gdG8gaGVhZGVyCiAgICAgIEBpZigkY3J1ZC0+Z2V0U3ViaGVhZGluZygpKQogICAgICAkKCcjY3J1ZFRhYmxlX2luZm8nKS5oaWRlKCk7CiAgICAgIEBlbHNlCiAgICAgICQoIiNkYXRhdGFibGVfaW5mb19zdGFjayIpLmh0bWwoJCgnI2NydWRUYWJsZV9pbmZvJykpLmNzcygnZGlzcGxheScsJ2lubGluZS1mbGV4JykuYWRkQ2xhc3MoJ2FuaW1hdGVkIGZhZGVJbicpOwogICAgICBAZW5kaWYKCiAgICAgIEBpZigkY3J1ZC0+Z2V0T3BlcmF0aW9uU2V0dGluZygncmVzZXRCdXR0b24nKSA/PyB0cnVlKQogICAgICAgIC8vIGNyZWF0ZSB0aGUgcmVzZXQgYnV0dG9uCiAgICAgICAgdmFyIGNydWRUYWJsZVJlc2V0QnV0dG9uID0gJzxhIGhyZWY9Int7dXJsKCRjcnVkLT5yb3V0ZSl9fSIgY2xhc3M9Im1sLTEiIGlkPSJjcnVkVGFibGVfcmVzZXRfYnV0dG9uIj57eyB0cmFucygnYmFja3BhY2s6OmNydWQucmVzZXQnKSB9fTwvYT4nOwoKICAgICAgICAkKCcjZGF0YXRhYmxlX2luZm9fc3RhY2snKS5hcHBlbmQoY3J1ZFRhYmxlUmVzZXRCdXR0b24pOwoKICAgICAgICAgIC8vIHdoZW4gY2xpY2tpbmcgaW4gcmVzZXQgYnV0dG9uIHdlIGNsZWFyIHRoZSBsb2NhbFN0b3JhZ2UgZm9yIGRhdGF0YWJsZXMuCiAgICAgICAgJCgnI2NydWRUYWJsZV9yZXNldF9idXR0b24nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHsKCiAgICAgICAgICAvL2NsZWFyIHRoZSBmaWx0ZXJzCiAgICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3t7IFN0cjo6c2x1ZygkY3J1ZC0+Z2V0Um91dGUoKSl9fV9saXN0X3VybCcpKSB7CiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3t7IFN0cjo6c2x1ZygkY3J1ZC0+Z2V0Um91dGUoKSkgfX1fbGlzdF91cmwnKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgne3sgU3RyOjpzbHVnKCRjcnVkLT5nZXRSb3V0ZSgpKX19X2xpc3RfdXJsX3RpbWUnKSkgewogICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd7eyBTdHI6OnNsdWcoJGNydWQtPmdldFJvdXRlKCkpIH19X2xpc3RfdXJsX3RpbWUnKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvL2NsZWFyIHRoZSB0YWJsZSBzb3J0aW5nL29yZGVyaW5nL3Zpc2liaWxpdHkKICAgICAgICAgIGlmKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdEYXRhVGFibGVzX2NydWRUYWJsZV8ve3sgJGNydWQtPmdldFJvdXRlKCkgfX0nKSkgewogICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdEYXRhVGFibGVzX2NydWRUYWJsZV8ve3sgJGNydWQtPmdldFJvdXRlKCkgfX0nKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgQGVuZGlmCgogICAgICAvLyBtb3ZlIHRoZSBib3R0b20gYnV0dG9ucyBiZWZvcmUgcGFnaW5hdGlvbgogICAgICAkKCIjYm90dG9tX2J1dHRvbnMiKS5pbnNlcnRCZWZvcmUoJCgnI2NydWRUYWJsZV93cmFwcGVyIC5yb3c6bGFzdC1jaGlsZCcgKSk7CgogICAgICAvLyBvdmVycmlkZSBhamF4IGVycm9yIG1lc3NhZ2UKICAgICAgJC5mbi5kYXRhVGFibGUuZXh0LmVyck1vZGUgPSAnbm9uZSc7CiAgICAgICQoJyNjcnVkVGFibGUnKS5vbignZXJyb3IuZHQnLCBmdW5jdGlvbihlLCBzZXR0aW5ncywgdGVjaE5vdGUsIG1lc3NhZ2UpIHsKICAgICAgICAgIG5ldyBOb3R5KHsKICAgICAgICAgICAgICB0eXBlOiAiZXJyb3IiLAogICAgICAgICAgICAgIHRleHQ6ICI8c3Ryb25nPnt7IHRyYW5zKCdiYWNrcGFjazo6Y3J1ZC5hamF4X2Vycm9yX3RpdGxlJykgfX08L3N0cm9uZz48YnI+e3sgdHJhbnMoJ2JhY2twYWNrOjpjcnVkLmFqYXhfZXJyb3JfdGV4dCcpIH19IgogICAgICAgICAgfSkuc2hvdygpOwogICAgICB9KTsKCiAgICAgICAgLy8gd2hlbiBjaGFuZ2luZyBwYWdlIGxlbmd0aCBpbiBkYXRhdGFibGVzLCBzYXZlIGl0IGludG8gbG9jYWxTdG9yYWdlCiAgICAgICAgLy8gc28gaW4gbmV4dCByZXF1ZXN0cyB3ZSBrbm93IGlmIHRoZSBsZW5ndGggY2hhbmdlZCBieSB1c2VyCiAgICAgICAgLy8gb3IgYnkgZGV2ZWxvcGVyIGluIHRoZSBjb250cm9sbGVyLgogICAgICAgICQoJyNjcnVkVGFibGUnKS5vbiggJ2xlbmd0aC5kdCcsIGZ1bmN0aW9uICggZSwgc2V0dGluZ3MsIGxlbiApIHsKICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0RhdGFUYWJsZXNfY3J1ZFRhYmxlXy97eyRjcnVkLT5nZXRSb3V0ZSgpfX1fcGFnZUxlbmd0aCcsIGxlbik7CiAgICAgICAgfSk7CgogICAgICAgIC8vIG1ha2Ugc3VyZSBBSkFYIHJlcXVlc3RzIGluY2x1ZGUgWFNSRiB0b2tlbgogICAgICAgICQuYWpheFByZWZpbHRlcihmdW5jdGlvbihvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIHhocikgewogICAgICAgICAgICB2YXIgdG9rZW4gPSAkKCdtZXRhW25hbWU9ImNzcmZfdG9rZW4iXScpLmF0dHIoJ2NvbnRlbnQnKTsKCiAgICAgICAgICAgIGlmICh0b2tlbikgewogICAgICAgICAgICAgICAgcmV0dXJuIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLVhTUkYtVE9LRU4nLCB0b2tlbik7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCgogICAgICAgICQoJyNjcnVkVGFibGUnKS5vbiggJ3BhZ2UuZHQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwYWdlX2NoYW5nZWQnLCB0cnVlKTsKICAgICAgICB9KTsKCiAgICAgIC8vIG9uIERhdGFUYWJsZSBkcmF3IGV2ZW50IHJ1biBhbGwgZnVuY3Rpb25zIGluIHRoZSBxdWV1ZQogICAgICAvLyAoZWcuIGRlbGV0ZSBhbmQgZGV0YWlsc19yb3cgYnV0dG9ucyBhZGQgZnVuY3Rpb25zIHRvIHRoaXMgcXVldWUpCiAgICAgICQoJyNjcnVkVGFibGUnKS5vbiggJ2RyYXcuZHQnLCAgIGZ1bmN0aW9uICgpIHsKICAgICAgICAgY3J1ZC5mdW5jdGlvbnNUb1J1bk9uRGF0YVRhYmxlc0RyYXdFdmVudC5mb3JFYWNoKGZ1bmN0aW9uKGZ1bmN0aW9uTmFtZSkgewogICAgICAgICAgICBjcnVkLmV4ZWN1dGVGdW5jdGlvbkJ5TmFtZShmdW5jdGlvbk5hbWUpOwogICAgICAgICB9KTsKICAgICAgfSApLmRhdGFUYWJsZSgpOwoKICAgICAgLy8gd2hlbiBkYXRhdGFibGVzLWNvbHZpcyAoY29sdW1uIHZpc2liaWxpdHkpIGlzIHRvZ2dsZWQKICAgICAgLy8gcmVidWlsZCB0aGUgZGF0YXRhYmxlIHVzaW5nIHRoZSBkYXRhdGFibGUtcmVzcG9uc2l2ZSBwbHVnaW4KICAgICAgJCgnI2NydWRUYWJsZScpLm9uKCAnY29sdW1uLXZpc2liaWxpdHkuZHQnLCAgIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICBjcnVkLnRhYmxlLnJlc3BvbnNpdmUucmVidWlsZCgpOwogICAgICB9ICkuZGF0YVRhYmxlKCk7CgogICAgICBAaWYgKCRjcnVkLT5nZXRSZXNwb25zaXZlVGFibGUoKSkKICAgICAgICAvLyB3aGVuIGNvbHVtbnMgYXJlIGhpZGRlbiBieSByZXBvbnNpdmUgcGx1Z2luLAogICAgICAgIC8vIHRoZSB0YWJsZSBzaG91bGQgaGF2ZSB0aGUgaGFzLWhpZGRlbi1jb2x1bW5zIGNsYXNzCiAgICAgICAgY3J1ZC50YWJsZS5vbiggJ3Jlc3BvbnNpdmUtcmVzaXplJywgZnVuY3Rpb24gKCBlLCBkYXRhdGFibGUsIGNvbHVtbnMgKSB7CiAgICAgICAgICAgIGlmIChjcnVkLnRhYmxlLnJlc3BvbnNpdmUuaGFzSGlkZGVuKCkpIHsKICAgICAgICAgICAgICAkKCIjY3J1ZFRhYmxlIikucmVtb3ZlQ2xhc3MoJ2hhcy1oaWRkZW4tY29sdW1ucycpLmFkZENsYXNzKCdoYXMtaGlkZGVuLWNvbHVtbnMnKTsKICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgJCgiI2NydWRUYWJsZSIpLnJlbW92ZUNsYXNzKCdoYXMtaGlkZGVuLWNvbHVtbnMnKTsKICAgICAgICAgICAgIH0KICAgICAgICB9ICk7CiAgICAgIEBlbHNlCiAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBjb2x1bW4gaGVhZGluZ3MgaGF2ZSB0aGUgc2FtZSB3aWR0aCBhcyB0aGUgYWN0dWFsIGNvbHVtbnMKICAgICAgICAvLyBhZnRlciB0aGUgdXNlciBtYW51YWxseSByZXNpemVzIHRoZSB3aW5kb3cKICAgICAgICB2YXIgcmVzaXplVGltZXI7CiAgICAgICAgZnVuY3Rpb24gcmVzaXplQ3J1ZFRhYmxlQ29sdW1uV2lkdGhzKCkgewogICAgICAgICAgY2xlYXJUaW1lb3V0KHJlc2l6ZVRpbWVyKTsKICAgICAgICAgIHJlc2l6ZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgLy8gUnVuIGNvZGUgaGVyZSwgcmVzaXppbmcgaGFzICJzdG9wcGVkIgogICAgICAgICAgICBjcnVkLnRhYmxlLmNvbHVtbnMuYWRqdXN0KCk7CiAgICAgICAgICB9LCAyNTApOwogICAgICAgIH0KICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgIHJlc2l6ZUNydWRUYWJsZUNvbHVtbldpZHRocygpOwogICAgICAgIH0pOwogICAgICAgICQoJy5zaWRlYmFyLXRvZ2dsZXInKS5jbGljayhmdW5jdGlvbigpIHsKICAgICAgICAgIHJlc2l6ZUNydWRUYWJsZUNvbHVtbldpZHRocygpOwogICAgICAgIH0pOwogICAgICBAZW5kaWYKCiAgICB9KTsKICA8L3NjcmlwdD4KCiAgQGluY2x1ZGUoJ2NydWQ6OmluYy5kZXRhaWxzX3Jvd19sb2dpYycpCiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9czo0MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBlbnVtcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBtZXRhZGF0YSI7YTowOnt9fQ==";